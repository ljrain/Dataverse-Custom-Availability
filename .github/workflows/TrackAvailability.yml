name: Track Dataverse Availabilty

permissions:
  actions: read
  contents: read
  id-token: write

on:
   schedule:
   - cron: '*/5 * * * *'  # Every 5 minutes
  
jobs:
  get-recent-artifact:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Dynamically Get Artifact Info
        shell: pwsh
        run: |
          $wfId = "148102141"
          $url = "https://api.github.com/repos/ljrain/DataverseAppInsightsTrackAvailability/actions/workflows/$wfId/runs"
          Write-Host $url
          $runs = curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" -H "X-GitHub-Api-Version: 2022-11-28" $url
          Write-Host "$runs"
          $runsObj = $runs | ConvertFrom-Json
          Write-Host "$runsObj and $($runsObj.GetType()) and $($runsObj.workflow_runs)"
          # Get the most recent run - GH api defaults list sorted reverse chronologically (index 0)
          $wfRunId = $runsObj.workflow_runs[0].id
          $artifactUrl = $runsObj.workflow_runs[0].artifacts_url
          $artifacts = curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ github.token }}" -H "X-GitHub-Api-Version: 2022-11-28" "$artifactUrl"
          $artifactsObj = $artifacts | ConvertFrom-Json
          $artifactName = $artifactsObj.artifacts[0].name
          Write-Host "adding artifact name and wfRun id to env vars $artifactName for run $wfRunId"
          echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV
          echo "RUN_ID=$wfRunId" >> $env:GITHUB_ENV
          dir

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.token }}
          name: ${{ env.ARTIFACT_NAME }}
          #path: ${{ github.workspace }}/${{ env.ARTIFACT_NAME }}
          run-id: ${{ env.RUN_ID }}

#      - name: Unzip
#        shell: pwsh
#        run: |
#          dir
#          Expand-Archive -Path ${{ github.workspace }}/${{ env.ARTIFACT_NAME }}.zip -Force
#          dir

      - name: Verify Artifact Presence
        shell: pwsh
        run: |
          dir *.exe
          .\${{ env.ARTIFACT_NAME }}.exe ${{ secret.dvConnectionString }} ${{ secret.aiConnectionString }}          
          

    
